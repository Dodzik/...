1.1 F F P F
1.2 P F F F
1.3 P F F F
1.4 F F P F


2.1
84|5|50,20,10,2,2
533|7|200,200,100,20,10,2,1

2.2
public static int Nomingreedy(int [] Nomin,int K,int N){
	int ile=0;
	if(K!=0){
		for(int i=N(-1; K!=0; i--){
			while(K>=Nomin[i]){
				K=K-Nomin[i];
				ile++;
				}
		return N;	
		}
	else return 0;
	}

2.3
|0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|
|0|1|2|2|2|3|3|1|2|2|3 | 3| 5| 5| 2| nomi 7
|0|1|2|2|2|3|3|1|2|2|1 | 2| 2| 3| 3| nomi 10

3.1
92|-----|2, 4, 23, 46, 92|Nie
114|2*3*19|2, 3, 6, 19, 38, 57, 114|Tak

3.2
public static String Czypierwsza(int n){
	int count=0;
		if (n==2){return "Tak";
		}
		for(int i=2;i<n-1;i++){
			if(n%i==0){
				count++;
				}
			}
		if(count==0;){
		return "Tak";
		}
		else {
		return "Nie";
		}
	}

3.3
public static String czySfeniczna(int n){
	ArrayList <Integer> dzielnikiPrime=new ArrayList<>();
		int count=0;
			for(int i=2;i<n-1;i++){
				if(n%i==0){
					count++;
						int countP=0;
							if (i==2){
								dzielnikiPrime.add(i);
								}
						for(int j=2;j<i-1;j++){
								if(i%j==0){
								countP++;
								}
							}
						if(countP==0;){
						dzielnikiPrime.add(i);
						}
				}
			}
			if (count>0){
			return "Nie";
			}
			if(dzielnikiPrime.size()==3){
			String a=dzielnikiPrime.get(0).toString()+" * "+dzielnikiPrime.get(1).toString()+" * "+dzielnikiPrime.get(2).toString();
			return a;
		}
		else return "Nie";
	}
	

